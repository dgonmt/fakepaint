<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7c9ed6b9-724a-4d2c-a1d3-cd11f27bd617" name="Changes" comment="Added even more functionality.&#10;&#10;TODO: &#10;1) bind controllers vid fields - Color Done&#10;&#10;2) implement render from array - Done&#10;&#10;3) implement undo/redo - Done in a buggy way, only drawing new shapes can be undone/redone&#10;&#10;4) implement selection mode - Done &#10;&#10;5) look up how to automatically render when an array is changed - Done in my own way. listener triggers the change to the selected object inside the toRender-list. After that the canvas is rerendered.&#10;&#10;6) Rerender when slider - value have changed.&#10;&#10;7) output to file - Done 1/2, rest: add header and footer to output file">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/gdome/fakepaint/controller/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/gdome/fakepaint/controller/Controller.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Record" />
        <option value="Enum" />
        <option value="FxmlFile" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2GdDtCM49yQt5LXsrM5mAOganQR" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "settings.editor.selected.configurable": "editor.preferences.fonts.default"
  }
}]]></component>
  <component name="RunManager">
    <configuration name="fakePaintApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="xyz.gdome.fakepaint.fakePaintApplication" />
      <module name="fakepaint" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="xyz.gdome.fakepaint.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.fakePaintApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7c9ed6b9-724a-4d2c-a1d3-cd11f27bd617" name="Changes" comment="" />
      <created>1666709781207</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1666709781207</updated>
      <workItem from="1666709782582" duration="17252000" />
      <workItem from="1666799645165" duration="22726000" />
      <workItem from="1666893772186" duration="116133000" />
    </task>
    <task id="LOCAL-00001" summary="Added new classes for shape constructing logic.">
      <created>1666768595132</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1666768595132</updated>
    </task>
    <task id="LOCAL-00002" summary="Added some stuff...">
      <created>1666798957652</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1666798957652</updated>
    </task>
    <task id="LOCAL-00003" summary="Added some stuff...">
      <created>1666799056699</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1666799056699</updated>
    </task>
    <task id="LOCAL-00004" summary="Added some stuff...">
      <created>1666799090701</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1666799090701</updated>
    </task>
    <task id="LOCAL-00005" summary="Added more data-holders and methods operation on the Model-side of the MVC-structure">
      <created>1666887775574</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1666887775574</updated>
    </task>
    <task id="LOCAL-00006" summary="Added even more functionality.&#10;TODO: &#10;1) bind controllers vid fields&#10;2) implement render from array&#10;3) implement undo/redo&#10;4) implement selection mode&#10;5) look up how to automatically render when an array is changed&#10;6) look up how to automatically render when a an object in the array have changed">
      <created>1667122621397</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1667122621397</updated>
    </task>
    <task id="LOCAL-00007" summary="Added even more functionality.&#10;TODO: &#10;1) bind controllers vid fields&#10;2) implement render from array - Done&#10;3) implement undo/redo&#10;4) implement selection mode&#10;5) look up how to automatically render when an array is changed&#10;6) look up how to automatically render when an object in the array have changed&#10;7) Selected shape">
      <created>1667290031007</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1667290031007</updated>
    </task>
    <task id="LOCAL-00008" summary="Added even more functionality.&#10;&#10;TODO: &#10;1) bind controllers vid fields - Color Done&#10;&#10;2) implement render from array - Done&#10;&#10;3) implement undo/redo - Done in a buggy way, only drawing new shapes can be undone/redone&#10;&#10;4) implement selection mode - Done &#10;&#10;5) look up how to automatically render when an array is changed - Done in my own way. listener triggers the change to the selected object inside the toRender-list. After that the canvas is rerendered.&#10;&#10;6) Rerender when slider - value have changed.&#10;&#10;7) output to file - Done 1/2, rest: add header and footer to output file">
      <created>1667738150578</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1667738150578</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Added new classes for shape constructing logic." />
    <MESSAGE value="Added some stuff..." />
    <MESSAGE value="Added more data-holders and methods operation on the Model-side of the MVC-structure" />
    <MESSAGE value="Added even more functionality.&#10;TODO: &#10;1) bind controllers vid fields&#10;2) implement render from array&#10;3) implement undo/redo&#10;4) implement selection mode&#10;5) look up how to automatically render when an array is changed&#10;6) look up how to automatically render when a an object in the array have changed" />
    <MESSAGE value="Added even more functionality.&#10;TODO: &#10;1) bind controllers vid fields&#10;2) implement render from array - Done&#10;3) implement undo/redo&#10;4) implement selection mode&#10;5) look up how to automatically render when an array is changed&#10;6) look up how to automatically render when an object in the array have changed&#10;7) Selected shape" />
    <MESSAGE value="Added even more functionality.&#10;&#10;TODO: &#10;1) bind controllers vid fields - Color Done&#10;&#10;2) implement render from array - Done&#10;&#10;3) implement undo/redo - Done in a buggy way, only drawing new shapes can be undone/redone&#10;&#10;4) implement selection mode - Done &#10;&#10;5) look up how to automatically render when an array is changed - Done in my own way. listener triggers the change to the selected object inside the toRender-list. After that the canvas is rerendered.&#10;&#10;6) Rerender when slider - value have changed.&#10;&#10;7) output to file - Done 1/2, rest: add header and footer to output file" />
    <option name="LAST_COMMIT_MESSAGE" value="Added even more functionality.&#10;&#10;TODO: &#10;1) bind controllers vid fields - Color Done&#10;&#10;2) implement render from array - Done&#10;&#10;3) implement undo/redo - Done in a buggy way, only drawing new shapes can be undone/redone&#10;&#10;4) implement selection mode - Done &#10;&#10;5) look up how to automatically render when an array is changed - Done in my own way. listener triggers the change to the selected object inside the toRender-list. After that the canvas is rerendered.&#10;&#10;6) Rerender when slider - value have changed.&#10;&#10;7) output to file - Done 1/2, rest: add header and footer to output file" />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>